Using the tuning function we identify a cost of `r tuningValues$best.performance` as minimizing the number of support vectors while classifying t

```{r}
testData <- PatientData[testingRows1,]
set1FIT <- svm(readmitted ~ ., data = PatientData[trainingRows1,], kernel = "linear", cost = 10, scale = FALSE)
#summary(set1FIT)
Set1Prediction <- predict(set1FIT, testData, na.action = na.exclude)
linear1test <- table(predict = Set1Prediction[!is.na(Set1Prediction)], truth = as.data.frame(testData[!is.na(Set1Prediction),"readmitted"])$readmitted)

testData <- PatientData[testingRows2,]
set2FIT <- svm(readmitted ~ ., data = PatientData[trainingRows2,], kernel = "linear", cost = 10, scale = FALSE)
#summary(set2FIT)
Set2Prediction <- predict(set2FIT, testData, na.action = na.exclude)
linear2test <- table(predict = Set2Prediction[!is.na(Set2Prediction)], truth = as.data.frame(testData[!is.na(Set2Prediction),"readmitted"])$readmitted)

testData <- PatientData[testingRows3,]
set3FIT <- svm(readmitted ~ ., data = PatientData[trainingRows3,], kernel = "linear", cost = 10, scale = FALSE)
#summary(set3FIT)
Set3Prediction <- predict(set3FIT, testData, na.action = na.exclude)
linear3test <- table(predict = Set3Prediction[!is.na(Set3Prediction)], truth = as.data.frame(testData[!is.na(Set3Prediction),"readmitted"])$readmitted)
```

```{r}

set1FIT <- svm(readmitted ~ ., data = PatientData[trainingRows1,], kernel = "radial", cost = 10, gamma = 1, scale = FALSE)
summary(set1FIT)
testData <- PatientData[testingRows1,]
Set1Prediction <- predict(set1FIT, testData, na.action = na.exclude)
radial1test <- table(predict = Set1Prediction[!is.na(Set1Prediction)], truth = as.data.frame(testData[!is.na(Set1Prediction),"readmitted"])$readmitted)


set2FIT <- svm(readmitted ~ ., data = testData, kernel = "radial", cost = 10, gamma = 1, scale = FALSE)
summary(set2FIT)
testData <- PatientData[testingRows2,]
Set2Prediction <- predict(set2FIT, PatientData[trainingRows2,], na.action = na.exclude)
radial2test<- table(predict = Set2Prediction[!is.na(Set2Prediction)], truth = as.data.frame(testData[!is.na(Set2Prediction),"readmitted"])$readmitted)


set3FIT <- svm(readmitted ~ ., data = testData, kernel = "radial", cost = 10, gamma = 1, scale = FALSE)
summary(set3FIT)
testData <- PatientData[testingRows3,]
Set3Prediction <- predict(set3FIT, PatientData[trainingRows3,], na.action = na.exclude)
radial3test <- table(predict = Set3Prediction[!is.na(Set3Prediction)], truth = as.data.frame(testData[!is.na(Set3Prediction),"readmitted"])$readmitted)

```

# Plot ROC curves

we can plot ROC curves by capturing scores for each prediction. An example of this is performed with our first radial model:


```{r}
rocplot <- function(pred, truth, ...){
  predob = prediction(pred, truth)
  perf = performance(predob, "tpr", "fpr")
  plot(perf, ...)}

set1FIT <- svm(readmitted ~ ., data = PatientData[trainingRows1,], kernel = "radial", cost = 10, gamma = 1, scale = FALSE, decision.values = T)
summary(set1FIT)
testData <- PatientData[testingRows1,]
Set1Prediction <- predict(set1FIT, testData, na.action = na.exclude)
radial1test <- table(predict = Set1Prediction[!is.na(Set1Prediction)], truth = as.data.frame(testData[!is.na(Set1Prediction),"readmitted"])$readmitted)
```